
---
title: "Dairy Production"
format:
  dashboard:
    nav-buttons: [github]
    github: https://github.com/WilliamBanda/Data-Dashboards-User-Perception
    fontfamily: "Open Dyslexic"
    fontsize: 1.2em
theme: [Vapor, theme/custom.scss]
fig-width: 5
fig-asp: 1
params:
  month:
  year:
  threshold_diff: 0.02
editor_options:
  chunk_output_type: console
---

```{r}
#| label: load-packages
#| message: false
#| warning: false
#| include: false

options(repos = "https://cran.rstudio.com")

# Suppress messages and warnings globally
suppressPackageStartupMessages({
  install.packages("reshape2", quiet = TRUE)
  install.packages(c("writexl", "viridis", "shiny", "ggplot2"), quiet = TRUE)
  
  library(tidyverse)
  library(readr)
  library(dplyr)
  library(openxlsx)
  library(ggplot2)
  library(shiny)
  library(writexl)
  library(plotly)
  library(reshape2)
  library(readxl)
  library(scales)
  library(DT)
  library(gt)
  library(viridis)
  library(lubridate)
})

```

```{r}
#| label: load-data
#| message: false

Data <- read_excel("C:/Users/WilliamBanda1/Documents/MRP/tidy_data.xlsx")
Data <- Data %>%
  filter(format(as.Date(date), "%Y") %in% 2018:2023)
Data$year <- factor(year(Data$date))

```

```{r}
#| label: values
#| results: hide

# Calculate average milk produced from 2018-2023
avg_milk_produced <- Data %>%
  summarize(avg_milk_produced = mean(milk_produced, na.rm = TRUE)) %>%
  pull(avg_milk_produced) %>% round(digits = 1)

# Calculate average milk per cow from 2018-2023
avg_milk_per_cow <- Data %>%
  summarize(avg_milk_per_cow = mean(milk_per_cow, na.rm = TRUE)) %>%
  pull(avg_milk_per_cow) %>% round(digits = 1)

# Calculate average protein % from 2018-2023
avg_protein <- Data %>%
  summarize(avg_protein = mean(protein, na.rm = TRUE)) %>%
  pull(avg_protein) %>% round(digits = 1)

# Calculate average fat from 2018-2023 and round to one decimal point
avg_fat <- Data %>%
  summarize(avg_fat = round(mean(fat, na.rm = TRUE), 1)) %>%
  pull(avg_fat)

```
# About

## Row {.flow}

::: card
::: card-header
About this Project and Data
:::
::: card-body
This project aims to address challenges of farm data management through organizing data and improving data awareness and accessibility. The aim is to improve accessibility, usability, compatibility, and convenience to end users or other stakeholders. 

The data used in this dashboard is from the Harper Adams Future Farm Dairy Unit. The data has dairy production and milk quality variables recorded on daily basis from 2018 to 2023.

[<i class="bi bi-github"></i> Source code](https://github.com/WilliamBanda/Dairy_Dashboard)

:::
:::

::: card
::: card-header

Follow These Steps to Navigate this Dashboard 
:::
::: card-body
Step 1: Click on the Stats tab and take a glance of the types of graphs, colours and texts used.

Step 2: Try to interact with the graphs by hovering on top of one of the graphs with the cursor, try to use one of the interactive functions on top of each graph and try to click on the extend button at the bottom right corner of the graph and hover through the graph.

Step 3: Click on the Data tab and take a glance of the data and the dictionary, try click the download data button or the download dictionary button.

Can you help answer the research questions?
:::
:::

# Stats
## Row {height=30%}

```{r}
#| content: valuebox
#| title: "Average Total Milk Produced (kg)"
#| font-family: "OpenDyslexic"
#| font-size: 16
#| line-height: 1.5
#| color: "#1F968BFF"  # Green color (hex code)

list(
  value = avg_milk_produced
)
```

```{r}
#| content: valuebox
#| title: "Average Milk per Cow (kg)"
#| font-family: "OpenDyslexic"
#| font-size: 16
#| line-height: 1.5
#| color: "#800080"  # Purple color (hex code)

list(
  value = avg_milk_per_cow
)
```

```{r}
#| content: valuebox
#| title: "Milk Quality (Protein %)"
#| font-family: "OpenDyslexic"
#| font-size: 16
#| line-height: 1.5
#| color: "#39568CFF"  # Blue color (hex code)

list(
  value = avg_protein
)
```

```{r}
#| component: valuebox
#| title: "Fat % Average"
#| font-family: "OpenDyslexic"
#| font-size: 16
#| line-height: 1.5
#| color: "#73D055FF"  # Golden yellow color (hex code)

list(
  value = avg_fat
)
```

## Row {height=80%}
### Column 

```{r}
#| title: "Daily Average Milk per Cow per Year"

# Convert date to year
Data$year <- lubridate::year(Data$date)

# Determine y-axis limits
y_min <- 2  # Set minimum to 2
y_max <- 5  # Set maximum to 5

# Create a box plot for milk_per_cow by year
p <- ggplot(Data, aes(x = factor(year), y = milk_per_cow, fill = factor(year))) +
  geom_boxplot(outlier.shape = NA) +  # Remove outliers
  labs(x = "Year", y = "Milk per Cow (kg/day)") +
  theme_minimal() +
  scale_fill_viridis(discrete = TRUE, option = "D") +  # Use viridis color palette
  theme(
    text = element_text(family = "OpenDyslexic", size = 14, color = "black"),  # Use OpenDyslexic font
    axis.title = element_text(size = 16, face = "bold", family = "OpenDyslexic"),
    axis.text = element_text(size = 14, color = "black", family = "OpenDyslexic"),
    plot.title = element_text(size = 18, face = "bold", family = "OpenDyslexic"),
    legend.position = "none",
    aspect.ratio = 5  # Adjust aspect ratio to make box plots taller
  ) +
  ylim(y_min, y_max) +  # Set y-axis limits from 2 to 5
  scale_y_continuous(breaks = seq(2, 5, by = 1),  # Set tick mark intervals to 1, from 2 to 5
                     expand = c(0, 0))  # Ensure y-axis starts from 2

# Convert ggplot2 plot to interactive plotly visualization
p_interactive <- ggplotly(p, dynamicTicks = TRUE, tooltip = "text")

# Customize interactive behavior
p_interactive <- p_interactive %>%
  layout(hovermode = "closest")

# Display the interactive plot
p_interactive
```

### Column 
```{r}
#| title: "Yearly Average Protein Percentage"
#| fig-width: 10
#| fig-height: 8

# Convert date to year
Data$year <- lubridate::year(Data$date)

# Determine y-axis limits
y_min <- 2  # Set minimum to 2
y_max <- 5  # Set maximum to 5

# Create a box plot for  protein percentage by year
p <- Data %>%
  filter(protein<299) %>%
ggplot(aes(x = factor(year), y =  protein, fill = factor(year))) +
  geom_boxplot(outlier.shape = NA) +  # Remove outliers
  labs(x = "Year", y = "Protein (%)") +
  theme_minimal() +
  scale_fill_viridis(discrete = TRUE, option = "D") +  # Use viridis color palette
  theme(
    text = element_text(family = "OpenDyslexic", size = 14, color = "black"),  # Use OpenDyslexic font
    axis.title = element_text(size = 16, face = "bold", family = "OpenDyslexic"),
    axis.text = element_text(size = 14, color = "black", family = "OpenDyslexic"),
    plot.title = element_text(size = 18, face = "bold", family = "OpenDyslexic"),
    legend.position = "none",
    aspect.ratio = 5  # Adjust aspect ratio to make box plots taller
  ) +
  ylim(y_min, y_max) +  # Set y-axis limits from 2 to 5
  scale_y_continuous(breaks = seq(2, 5, by = 1),  # Set tick mark intervals to 1, from 2 to 5
                     expand = c(0, 0))  # Ensure y-axis starts from 2

# Convert ggplot2 plot to interactive plotly visualization
p_interactive <- ggplotly(p, dynamicTicks = TRUE, tooltip = "text")

# Customize interactive behavior
p_interactive <- p_interactive %>%
  layout(hovermode = "closest")

# Display the interactive plot
p_interactive
```

### column
```{r}
#| title: "Yearly Average Fat Percentage"
#| fig-width: 6
#| fig-height: 8
 
# Convert date to year
Data$year <- lubridate::year(Data$date)

# Determine y-axis limits
y_min <- 2  # Set minimum to 2
y_max <- 5  # Set maximum to 5

# Create a box plot for fat percentage by year
p <- ggplot(Data, aes(x = factor(year), y = fat, fill = factor(year))) +
  geom_boxplot(outlier.shape = NA) +  # Remove outliers
  labs(x = "Year", y = "Fat (%)") +
  theme_minimal() +
  scale_fill_viridis(discrete = TRUE, option = "D") +  # Use viridis color palette
  theme(
    text = element_text(family = "OpenDyslexic", size = 14, color = "black"),  # Use OpenDyslexic font
    axis.title = element_text(size = 16, face = "bold", family = "OpenDyslexic"),
    axis.text = element_text(size = 14, color = "black", family = "OpenDyslexic"),
    plot.title = element_text(size = 18, face = "bold", family = "OpenDyslexic"),
    legend.position = "none",
    aspect.ratio = 5  # Adjust aspect ratio to make box plots taller
  ) +
  ylim(y_min, y_max) +  # Set y-axis limits from 2 to 5
  scale_y_continuous(breaks = seq(2, 5, by = 1),  # Set tick mark intervals to 1, from 2 to 5
                     expand = c(0, 0))  # Ensure y-axis starts from 2

# Convert ggplot2 plot to interactive plotly visualization
p_interactive <- ggplotly(p, dynamicTicks = TRUE, tooltip = "text")

# Customize interactive behavior
p_interactive <- p_interactive %>%
  layout(hovermode = "closest")

# Display the interactive plot
p_interactive
```

# Data
### Column {.tabset width="100%"}

```{r}
#| title: Data
# Sample data
Data <- data.frame(
  Date = Sys.Date() - 1:100,
  CowsInMilk = sample(100:200, 100, replace = TRUE),
  CowsInTank = sample(100:200, 100, replace = TRUE),
  MilkProduced = sample(500:1000, 100, replace = TRUE),
  MilkPerCow = runif(100, 20, 30),
  StrawYard = sample(50:100, 100, replace = TRUE),
  Highs = sample(10:20, 100, replace = TRUE),
  Trial1 = sample(5:15, 100, replace = TRUE),
  Trial2 = sample(5:15, 100, replace = TRUE),
  Low = sample(1:10, 100, replace = TRUE),
  Hscc = sample(150:200, 100, replace = TRUE),
  Scc = sample(200:300, 100, replace = TRUE),
  Bs = runif(100, 3, 5),
  Fat = runif(100, 3, 5),
  Protein = runif(100, 3, 5)
)

# Create the interactive table
table <- datatable(
  Data,
  colnames = c("ID", "Date", "Cows in Milk", "Cows in Tank", "Milk Produced", "Milk per Cow", "Straw Yard", "Highs", "Trial 1", "Trial 2", "Low", "Hscc", "Scc", "Bs", "Fat", "Protein"),
  options = list(
    dom = "Bfrtip",
    buttons = list(
      list(
        extend = 'excel',
        text = 'Download Data',
        title = 'Dairy Production Data'
      )
    ),
    paging = TRUE,
    lengthMenu = c(10, 50, 100, 150, 200, 500, 1000, 1500),
    pageLength = 10,
    columnDefs=list(list(className='dt-center',targets="_all")),
    scrollY = FALSE,
    initComplete = JS(
      "function(settings, json) {",
      "$(this.api().table().container()).css({'color': 'white'});",
      "$('.dt-button').css({'background-color': '#007a78', 'color': 'white'});",
      "}"
    )
  ),
  extensions = "Buttons",
  #callback = JS("table.buttons().container().appendTo('div.dt-buttons');")
)%>%
  formatRound(columns=c("Fat", "Bs", "Protein", "MilkPerCow"), digits=2)

# Format the date column
table <- formatDate(
  table,
  columns = 1,
  method = "toDateString"
)

# Display the interactive table
table

```

```{r}
#| title: Dictionary

# Read the Excel file and load the data from the second sheet
Dictionary <- read_excel("C:/Users/WilliamBanda1/Documents/MRP/tidy_data.xlsx", sheet = 2)

# Create the DataTable with the specified options
datatable(Dictionary,
  options = list(
    dom = "Bfrtip",
    buttons = list(
      list(
        extend = 'excel',
        text = 'Download Dictionary',
        title = 'Dairy Data Dictionary'
      )
    ),
    paging = TRUE,
    pageLength = 10,
    columnDefs = list(list(className = 'dt-center', targets = "_all")),
    scrollY = FALSE,
    initComplete = JS(
      "function(settings, json) {",
      "$(this.api().table().container()).css({'color': 'white'});",
      "$('.dt-button').css({'background-color': '#007a78', 'color': 'white'});",
      "}"
    )
  )
)

```


